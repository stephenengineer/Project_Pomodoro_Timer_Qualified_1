{"version":3,"sources":["utils/class-names/index.js","utils/duration/index.js","pomodoro/BreakDuration.jsx","pomodoro/FocusDuration.jsx","pomodoro/PausedIndicator.jsx","pomodoro/PlayBar.jsx","pomodoro/PlayButtons.jsx","pomodoro/PlayInfo.jsx","pomodoro/Pomodoro.js","utils/useInterval/index.js","App.js","index.js"],"names":["classNames","classNameToBoolean","Object","entries","reduce","classes","className","value","concat","undefined","filter","join","minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","BreakDuration","focusAndBreakDuration","handleBreakChange","session","breakDuration","style","opacity","data-testid","type","onClick","FocusDuration","handleFocusChange","focusDuration","PausedIndicator","isTimerRunning","display","PlayBar","selectedDuration","label","height","role","aria-valuemin","aria-valuemax","aria-valuenow","timeRemaining","width","PlayButtons","playPause","handleStopClick","aria-label","title","oi","disabled","PlayInfo","givenSeconds","seconds","round","secondsToDuration","nextTick","prevState","max","Pomodoro","useState","setIsTimerRunning","setSession","setFocusAndBreakDuration","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","currentSession","nextSession","handleFocusAndBreakChange","target","newFocusDuration","newBreakDuration","includes","min","nextState","prevStateSession","justifyContent","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a2d56c3c.chunk.js","sourcesContent":["/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from \"react\";\r\nimport classNames from \"../utils/class-names\";\r\nimport { minutesToDuration } from \"../utils/duration\";\r\n\r\nfunction BreakDuration({focusAndBreakDuration, handleBreakChange, session}) {\r\n    const { breakDuration } = focusAndBreakDuration;\r\n    const style = {};\r\n    if (session) style.opacity = \"0.5\";\r\n    return (\r\n        <div className=\"col\">\r\n            <div className=\"float-right\">\r\n                <div className=\"input-group input-group-lg mb-2\" style={style}>\r\n                  <span className=\"input-group-text\" data-testid=\"duration-break\">\r\n                    {/* TODO: Update this text to display the current break session duration */}\r\n                    Break Duration: {minutesToDuration(breakDuration)}\r\n                  </span>\r\n                  <div className=\"input-group-append\">\r\n                    {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\r\n                    <button\r\n                      type=\"button\"\r\n                      className={classNames({\r\n                        \"btn btn-secondary\": true,\r\n                        \"break decrease\": !session})}\r\n                      data-testid=\"decrease-break\"\r\n                      onClick={handleBreakChange()}\r\n                    >\r\n                      <span className={classNames({\r\n                        \"oi oi-minus\": true,\r\n                        \"break decrease\": !session})} />\r\n                    </button>\r\n                    {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\r\n                    <button\r\n                      type=\"button\"\r\n                      className={classNames({\r\n                        \"btn btn-secondary\": true,\r\n                        \"break increase\": !session})}\r\n                      data-testid=\"increase-break\"\r\n                      onClick={handleBreakChange()}\r\n                    >\r\n                      <span className={classNames({\r\n                        \"oi oi-plus\": true,\r\n                        \"break increase\": !session})} />\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BreakDuration;","import React from \"react\";\r\nimport classNames from \"../utils/class-names\";\r\nimport { minutesToDuration } from \"../utils/duration\";\r\n\r\nfunction FocusDuration({focusAndBreakDuration, handleFocusChange, session}) {\r\n    const { focusDuration } = focusAndBreakDuration;\r\n    const style = {};\r\n    if (session) style.opacity = \"0.5\";\r\n    return (\r\n        <div className=\"col\">\r\n            <div className=\"input-group input-group-lg mb-2\" style={style}>\r\n                <span className=\"input-group-text\" data-testid=\"duration-focus\">\r\n                  {/* TODO: Update this text to display the current focus session duration */}\r\n                  Focus Duration: {minutesToDuration(focusDuration)}\r\n                </span>\r\n                <div className=\"input-group-append\">\r\n                  {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\r\n                  <button\r\n                    type=\"button\"\r\n                    className={classNames({\r\n                        \"btn btn-secondary\": true,\r\n                        \"focus-button decrease\": !session})}\r\n                    data-testid=\"decrease-focus\"\r\n                    onClick={handleFocusChange()}\r\n                  >\r\n                    <span className={classNames({\r\n                        \"oi oi-minus\": true,\r\n                        \"focus decrease\": !session})} />\r\n                  </button>\r\n                  {/* TODO: Implement increasing focus duration and disable during a focus or break session */}\r\n                  <button\r\n                    type=\"button\"\r\n                    className={classNames({\r\n                        \"btn btn-secondary\": true,\r\n                        \"focus-button increase\": !session})}\r\n                    data-testid=\"increase-focus\"\r\n                    onClick={handleFocusChange()}\r\n                  >\r\n                    <span className={classNames({\r\n                        \"oi oi-plus\": true,\r\n                        \"focus increase\": !session})} />\r\n                  </button>\r\n                </div>\r\n              </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FocusDuration;","import React from \"react\";\r\n\r\nfunction PausedIndicator({session, isTimerRunning}) {\r\n    const style = {};\r\n    if (!session || isTimerRunning) style.display = \"none\";\r\n    return (\r\n        <h2 style={style}>PAUSED</h2>\r\n    )\r\n}\r\n\r\nexport default PausedIndicator;","import React from \"react\";\r\n\r\nfunction PlayBar({session, focusAndBreakDuration}) {\r\n\r\n    const {focusDuration, breakDuration} = focusAndBreakDuration;\r\n    const selectedDuration = session?.label === \"Focusing\" ? focusDuration : breakDuration;\r\n    const style = {};\r\n    if (!session) style.display = \"none\";\r\n    return (\r\n        <div className=\"col\" style={style}>\r\n            <div className=\"progress\" style={{ height: \"20px\" }}>\r\n              <div\r\n                className=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n                aria-valuenow={100 - (session?.timeRemaining / (selectedDuration*60) * 100)} // TODO: Increase aria-valuenow as elapsed time increases\r\n                style={{ width: `${100 - (session?.timeRemaining / (selectedDuration*60) * 100)}%` }} // TODO: Increase width % as elapsed time increases\r\n              />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayBar;","import React from \"react\";\r\nimport classNames from \"../utils/class-names\";\r\n\r\nfunction PlayButtons({playPause, isTimerRunning, session, handleStopClick}) {\r\n    const style = {};\r\n    if (!session) style.opacity = \"0.5\";\r\n    return (\r\n        <div className=\"col\">\r\n          <div\r\n            className=\"btn-group btn-group-lg mb-2\"\r\n            role=\"group\"\r\n            aria-label=\"Timer controls\"\r\n          >\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              data-testid=\"play-pause\"\r\n              title=\"Start or pause timer\"\r\n              onClick={playPause}\r\n            >\r\n              <span\r\n                className={classNames({\r\n                  oi: true,\r\n                  \"oi-media-play\": !isTimerRunning,\r\n                  \"oi-media-pause\": isTimerRunning,\r\n                })}\r\n              />\r\n            </button>\r\n            {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\r\n            {/* TODO: Disable the stop button when there is no active session */}\r\n            <button\r\n              type=\"button\"\r\n              className={classNames({\r\n                \"btn btn-secondary\": true,\r\n                \"stop-button\": session})}\r\n              data-testid=\"stop\"\r\n              title=\"Stop the session\"\r\n              style={style}\r\n              onClick={handleStopClick()}\r\n              disabled={!session}\r\n            >\r\n              <span className={classNames({\r\n                \"oi oi-media-stop\": true,\r\n                \"stop-button\": session})} />\r\n            </button>\r\n          </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayButtons;","import React from \"react\";\r\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\r\n\r\nfunction PlayInfo({session, focusAndBreakDuration}) {\r\n    const style = {};\r\n    if (!session) style.display = \"none\";\r\n    const {focusDuration, breakDuration} = focusAndBreakDuration;\r\n    return session && (\r\n        /* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */\r\n        <div className=\"col\">\r\n            {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\r\n            <h2 data-testid=\"session-title\">\r\n                {session?.label} for {minutesToDuration(session?.label === \"Focusing\" ? focusDuration : breakDuration)} minutes\r\n            </h2>\r\n            {/* TODO: Update message below correctly format the time remaining in the current session */}\r\n            <p className=\"lead\" data-testid=\"session-sub-title\">\r\n                {secondsToDuration(session?.timeRemaining)} remaining\r\n            </p>\r\n        </div>\r\n)\r\n}\r\n\r\nexport default PlayInfo;","import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport BreakDuration from \"./BreakDuration\";\nimport FocusDuration from \"./FocusDuration\";\nimport PausedIndicator from \"./PausedIndicator\";\nimport PlayBar from \"./PlayBar\";\nimport PlayButtons from \"./PlayButtons\";\nimport PlayInfo from \"./PlayInfo\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  if (!prevState) return null;\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusAndBreakDuration, setFocusAndBreakDuration] = useState({\n    focusDuration: 25,\n    breakDuration: 5,\n  });\n  const { focusDuration, breakDuration } = focusAndBreakDuration;\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(\n    () => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  const handleFocusAndBreakChange = ({ target }) => {\n    let newFocusDuration = focusDuration;\n    let newBreakDuration = breakDuration;\n    if (target.className.includes(\"focus\")) {\n      newFocusDuration = target.className.includes(\"decrease\")\n        ? Math.max(5, focusDuration - 5)\n        : Math.min(60, focusDuration + 5);\n    }\n    if (target.className.includes(\"break\")) {\n      newBreakDuration = target.className.includes(\"decrease\")\n        ? Math.max(1, breakDuration - 1)\n        : Math.min(15, breakDuration + 1);\n    }\n    setFocusAndBreakDuration({\n      focusDuration: newFocusDuration,\n      breakDuration: newBreakDuration,\n    });\n  };\n\n  const handleStopClick = ({ target }) => {\n    if (target.className.includes(\"stop-button\")) {\n      setSession(null);\n      setIsTimerRunning(false);\n    }\n  };\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <FocusDuration\n          focusAndBreakDuration={focusAndBreakDuration}\n          handleFocusChange={() => handleFocusAndBreakChange}\n          session={session}\n        />\n        <BreakDuration\n          focusAndBreakDuration={focusAndBreakDuration}\n          handleBreakChange={() => handleFocusAndBreakChange}\n          session={session}\n        />\n      </div>\n      <div className=\"row\">\n        <PlayButtons\n          playPause={playPause}\n          isTimerRunning={isTimerRunning}\n          session={session}\n          handleStopClick={() => handleStopClick}\n        />\n      </div>\n      <div>\n        <div className=\"row mb-2\">\n          <PlayInfo\n            session={session}\n            focusAndBreakDuration={focusAndBreakDuration}\n          />\n        </div>\n        <div className=\"row\" style={{ justifyContent: \"center\" }}>\n          <PausedIndicator session={session} isTimerRunning={isTimerRunning} />\n        </div>\n        <div className=\"row mb-2\">\n          <PlayBar\n            session={session}\n            focusAndBreakDuration={focusAndBreakDuration}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}